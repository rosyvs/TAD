# ################################
# Model: Speaker identification with ECAPA using kids corpora
# Authors: Rosy Southwell, based on recipe by Hwidong Na & Mirco Ravanelli
# ################################

# Basic parameters
seed: 303
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/ecapa_kids_anew_3s_noVoxCeleb/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: /mnt/shared/CORPORA/  # e.g. /path/to/Voxceleb
train_annotation: !ref <data_folder>/data_manifests/ALL_TRAIN_fixlen3.csv
# valid_annotation: !ref <data_folder>/data_manifests/ISAT-SI_DEV_fixlen1.csv # just to validate speakerID classifier. should contain the SAME speakers as TRAIN

# verification_file: #TODO: make verification pairs from TEST split 

skip_prep: True
ckpt_interval_minutes: 3 # save checkpoint every N min

# Training parameters
number_of_epochs: 10
batch_size: 8 # TODO: changed from 32
lr: 0.001 # 0.001 orig
base_lr: 0.00000001
max_lr: !ref <lr>
step_size: 65000 # TODO: check this isn't something that should be constrained by input length
sample_rate: 16000
sentence_len: 3.0 # seconds TODO: how to make it take variable length inputs, check where this param is used 
shuffle: True # TODO: rather sort by duration than shuffle for batches? 
random_chunk: False 

# Feature parameters
n_mels: 80
left_frames: 0
right_frames: 0
deltas: False

# Number of speakers
out_n_neurons: 3378 # TODO: update for filtered files. this is the n speakers in the training data 

dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: 4


# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    left_frames: !ref <left_frames>
    right_frames: !ref <right_frames>
    deltas: !ref <deltas>

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_mels>
    channels: [512, 512, 512, 512, 1536] # use fewer channels in CNN. Was [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    groups: [1, 1, 1, 1, 1]
    attention_channels: 128
    lin_neurons: 192

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 192
    out_neurons: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Data augmentation
augment_wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [100]

augment_speed: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

add_rev: !new:speechbrain.lobes.augment.EnvCorrupt
    noise_csv: !ref <data_folder>/data_manifests/musan_noise.csv #path to noise csv here
    reverb_csv: !ref <data_folder>/data_manifests/reverb.csv # path to reverb csv here
    # openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 0.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_noise: !new:speechbrain.lobes.augment.EnvCorrupt #TODO: add speechbrain noise data to this 
    noise_csv: !ref <data_folder>/data_manifests/musan_noise.csv #path to noise csv here
    reverb_csv: !ref <data_folder>/data_manifests/reverb.csv # path to reverb csv here
    # openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 0.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_rev_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    noise_csv: !ref <data_folder>/data_manifests/musan_noise.csv #path to noise csv here
    reverb_csv: !ref <data_folder>/data_manifests/reverb.csv # path to reverb csv here
    # openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_isat_noise: !new:speechbrain.lobes.augment.EnvCorrupt # add speechbrain noise data to this 
    noise_csv: !ref <data_folder>/data_manifests/isat_noise.csv
    reverb_csv: !ref <data_folder>/data_manifests/reverb.csv
    # openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 0.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0


# Definition of the augmentation pipeline.
# If concat_augment = False, the augmentation techniques are applied
# in sequence. If concat_augment = True, all the augmented signals
# # are concatenated in a single big batch.

augment_pipeline: [
    !ref <augment_wavedrop>,
    !ref <augment_speed>,
    !ref <add_rev>,
    !ref <add_noise>,
    !ref <add_rev_noise>,
    !ref <add_isat_noise>
]
concat_augment: False 

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

modules:
    compute_features: !ref <compute_features>
    augment_wavedrop: !ref <augment_wavedrop>
    augment_speed: !ref <augment_speed>
    add_rev: !ref <add_rev>
    add_noise: !ref <add_noise>
    add_rev_noise: !ref <add_rev_noise>
    add_isat_noise: !ref <add_isat_noise>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
# tb_logger:  !new:speechbrain.utils.train_logger.TensorboardLogger
#     save_dir: !ref <output_folder>/TB/

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder> 
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        lr_annealing: !ref <lr_annealing>
